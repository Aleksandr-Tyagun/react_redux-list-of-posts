{"version":3,"sources":["store/loading.ts","store/posts.ts","store/error.ts","store/search.ts","constants/index.ts","helpers/api.ts","store/index.ts","components/Start.tsx","components/Comment.tsx","components/CommentsList.tsx","components/UserInfo.tsx","components/Post.tsx","components/PostsList.tsx","helpers/debounce.ts","App.tsx","index.tsx"],"names":["reducer","loading","action","type","posts","filter","post","id","postId","setError","errorMessage","query","toLowerCase","API_URL","fetchPosts","a","fetch","response","json","fetchUsers","fetchComments","rootReducer","combineReducers","loadingReducer","postsReducer","errorReducer","queryReducer","getIsLoading","state","getPosts","getErrorMessage","getSearchQuery","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","isLoading","useSelector","buttonText","className","onClick","Promise","all","api","then","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","map","user","find","userId","comments","comment","catch","e","message","finally","disabled","Comment","name","email","body","href","CommentsList","key","User","phone","Post","title","UserInfo","PostsList","searchQuery","filteredPosts","useMemo","includes","handleSearchInput","func","delay","timeoutId","args","clearTimeout","setTimeout","debounce","value","onChange","target","length","App","Root","ReactDOM","render","document","getElementById"],"mappings":"uUAuBeA,EAbC,WAAyC,IAAxCC,EAAuC,wDAAtBC,EAAsB,uCACtD,OAAQA,EAAOC,MACb,IATkB,gBAUhB,OAAO,EAET,IAXmB,iBAYjB,OAAO,EAET,QACE,OAAOF,ICGED,EAbC,WAA4C,IAA3CI,EAA0C,uDAA1B,GAAIF,EAAsB,uCACzD,OAAQA,EAAOC,MACb,IARc,YASZ,OAAOD,EAAOE,MAEhB,IAVgB,cAWd,OAAOA,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAOM,UAEjD,QACE,OAAOJ,ICbAK,EAAW,SAACC,GAAD,MAA2B,CAAEP,KAFnC,YAEoDO,iBAYvDV,EAVC,WAA2C,IAA1CU,EAAyC,uDAA1B,GAAIR,EAAsB,uCACxD,OAAQA,EAAOC,MACb,IANc,YAOZ,OAAOD,EAAOQ,aAEhB,QACE,OAAOA,ICIEV,EAVC,WAAoC,IAAnCW,EAAkC,uDAA1B,GAAIT,EAAsB,uCACjD,OAAQA,EAAOC,MACb,IANc,YAOZ,OAAOD,EAAOS,MAAMC,cAEtB,QACE,OAAOD,ICbAE,EAAU,iECEVC,EAAU,uCAAG,4BAAAC,EAAA,sEACDC,MAAM,GAAD,OAAIH,EAAJ,gBADJ,cAClBI,EADkB,yBAGjBA,EAASC,QAHQ,2CAAH,qDAMVC,EAAU,uCAAG,4BAAAJ,EAAA,sEACDC,MAAM,GAAD,OAAIH,EAAJ,gBADJ,cAClBI,EADkB,yBAGjBA,EAASC,QAHQ,2CAAH,qDAMVE,EAAa,uCAAG,4BAAAL,EAAA,sEACJC,MAAM,GAAD,OAAIH,EAAJ,mBADD,cACrBI,EADqB,yBAGpBA,EAASC,QAHW,2CAAH,qDCHpBG,EAAcC,0BAAgB,CAClCrB,QAASsB,EACTnB,MAAOoB,EACPd,aAAce,EACdd,MAAOe,IAKIC,EAAe,SAACC,GAAD,OAAsBA,EAAM3B,SAC3C4B,EAAW,SAACD,GAAD,OAAsBA,EAAMxB,OACvC0B,EAAkB,SAACF,GAAD,OAAsBA,EAAMlB,cAC9CqB,EAAiB,SAACH,GAAD,OAAsBA,EAAMjB,OAiC3CqB,EALDC,sBACZZ,EACAa,8BAAoBC,0BAAgBC,OChDzBC,EAAQ,WACnB,IAAMC,EAAWC,cACXC,EAAYC,YAAYT,GAGxBU,EAFeD,YAAYT,GAEE,YAAc,OAEjD,OACE,4BACE7B,KAAK,SACLwC,UAAU,mBACVC,QAAS,kBAAMN,EDUnB,uCAAO,WAAOA,GAAP,SAAAvB,EAAA,sDACLuB,ENpB+B,CAAEnC,KAJf,kBMyBlBmC,EAAS7B,EAAS,KAElBoC,QAAQC,IAAI,CAACC,IAAkBA,IAAkBA,MAC9CC,MAAK,YAA6D,IAAD,mBAA1DC,EAA0D,KAAzCC,EAAyC,KAAxBC,EAAwB,KAC1DC,EAAgBH,EAAgBI,KAAI,SAAA/C,GACxC,OAAO,2BACFA,GADL,IAEEgD,KAAMJ,EAAgBK,MAAK,SAAAD,GAAI,OAAIA,EAAK/C,KAAOD,EAAKkD,WAAW,GAC/DC,SAAUN,EAAmB9C,QAAO,SAAAqD,GAAO,OAAIpD,EAAKC,KAAOmD,EAAQlD,WAAW,QAIlF8B,ELlCoC,CAAEnC,KAH5B,YAG6CC,MKkCrCgD,OAEnBO,OAAM,SAAAC,GACLtB,EAAS7B,EAASmD,EAAEC,aAErBC,SAAQ,WACPxB,ENtC4B,CAAEnC,KAJf,sBMsBd,2CAAP,wDCTI4D,SAAUvB,GAETA,EAAY,aAAeE,ICcnBsB,EA3BkB,SAAC,GAAiB,IAAfN,EAAc,EAAdA,QAEhCO,EAGEP,EAHFO,KACAC,EAEER,EAFFQ,MACAC,EACET,EADFS,KAGF,OACE,wBAAIxB,UAAU,gBACZ,uBAAGA,UAAU,qBACVwB,GAEH,0BAAMxB,UAAU,qBACbsB,GAGH,uBACEtB,UAAU,qBACVyB,KAAI,iBAAYF,IAEfA,KCHMG,EAfuB,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACvC,OACE,yBAAKd,UAAU,iBACb,0BAAMA,UAAU,uBAAhB,aAGA,wBAAIA,UAAU,sBACXc,EAASJ,KAAI,SAAAK,GAAO,OACnB,kBAAC,EAAD,CAASY,IAAKZ,EAAQnD,GAAImD,QAASA,UCW9Ba,EArBe,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KACvBW,EAAgBX,EAAhBW,KAAMO,EAAUlB,EAAVkB,MAEd,OACE,yBAAK7B,UAAU,aACb,0BAAMA,UAAU,mBAAhB,gBAGA,0BAAMA,UAAU,kBACbsB,GAEH,uBACEtB,UAAU,kBACVyB,KAAI,cAASI,IAEZA,KCuBMC,EAjCe,SAAC,GAAc,IAAZnE,EAAW,EAAXA,KAE7BC,EAKED,EALFC,GACAmE,EAIEpE,EAJFoE,MACAP,EAGE7D,EAHF6D,KACAV,EAEEnD,EAFFmD,SACAH,EACEhD,EADFgD,KAEIhB,EAAWC,cAEjB,OACE,wBAAII,UAAU,aACZ,4BACExC,KAAK,SACLwC,UAAU,qBACVC,QAAS,kBAAMN,EVnBwB,CAAEnC,KAH7B,cAGgDK,OUmBzBD,MAHrC,eAOA,wBAAIoC,UAAU,mBACX+B,GAEH,uBAAG/B,UAAU,kBACVwB,GAEH,kBAACQ,EAAD,CAAUrB,KAAMA,IACfG,GACC,kBAAC,EAAD,CAAcA,SAAUA,MC1BhC,IAiCemB,EAjCoB,SAAC,GAAe,IAAbxE,EAAY,EAAZA,MAC9BkC,EAAWC,cACXsC,EAAcpC,YAAYV,GAE1B+C,EAAgBC,mBAAQ,WAC5B,OAAO3E,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKoE,MAAM9D,cAAcoE,SAASH,IACzDvE,EAAK6D,KAAKvD,cAAcoE,SAASH,QACrC,CAACzE,EAAOyE,IAELI,ECrBD,SAAkBC,EAAmCC,GAC1D,IAAIC,EAEJ,OAAO,WAA8B,IAAD,uBAAzBC,EAAyB,yBAAzBA,EAAyB,gBAC9BD,GACFE,aAAaF,GAGfA,EAAYG,YAAW,WACrBL,EAAI,WAAJ,EAAQG,KACPF,IDWqBK,EAAS,SAACC,GAClCnD,ETjBwC,CAAEnC,KAF5B,YAE6CQ,MSiBzC8E,MACjB,KAEH,OACE,yBAAK9C,UAAU,cACb,2BACEA,UAAU,mBACVxC,KAAK,OACLuF,SAAU,SAAC9B,GAAD,OAAOqB,EAAkBrB,EAAE+B,OAAOF,UAJhD,iBAMaX,EAAcc,QACzB,wBAAIjD,UAAU,mBACXmC,EAAczB,KAAI,SAAA/C,GAAI,OACrB,kBAAC,EAAD,CACEgE,IAAKhE,EAAKC,GACVD,KAAMA,UEAHuF,EA5BH,WACV,IAAMzF,EAAQqC,YAAYT,GACpBtB,EAAe+B,YAAYT,GAEjC,OACE,yBAAKW,UAAU,OACb,wBAAIA,UAAU,cAAd,uBAGkB,IAAjBvC,EAAMwF,OACL,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAWxF,MAAOA,IAEF,KAAjBM,GACC,yBAAKiC,UAAU,cACb,0BAAMA,UAAU,oBAAhB,yBAGA,0BAAMA,UAAU,mBACbjC,MCrBPoF,EAAO,kBACX,kBAAC,IAAD,CAAU9D,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKN+D,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.60859561.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n\nconst GET_POSTS = 'GET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\n\nexport const setPosts = (posts: Post[]) => ({ type: GET_POSTS, posts });\nexport const deletePost = (postId: number) => ({ type: DELETE_POST, postId });\n\nconst reducer = (posts: Post[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.posts;\n\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.postId);\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n\nconst SET_ERROR = 'SET_ERROR';\n\nexport const setError = (errorMessage: string) => ({ type: SET_ERROR, errorMessage });\n\nconst reducer = (errorMessage = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (query: string) => ({ type: SET_QUERY, query });\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query.toLowerCase();\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","export const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n","import { API_URL } from '../constants';\n\nexport const fetchPosts = async (): Promise<Post[]> => {\n  const response = await fetch(`${API_URL}/posts.json`);\n\n  return response.json();\n};\n\nexport const fetchUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${API_URL}/users.json`);\n\n  return response.json();\n};\n\nexport const fetchComments = async (): Promise<Comment[]> => {\n  const response = await fetch(`${API_URL}/comments.json`);\n\n  return response.json();\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport postsReducer, { setPosts } from './posts';\nimport errorReducer, { setError } from './error';\nimport queryReducer from './search';\nimport * as api from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postsReducer,\n  errorMessage: errorReducer,\n  query: queryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getIsLoading = (state: RootState) => state.loading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\nexport const getSearchQuery = (state: RootState) => state.query;\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n    dispatch(setError(''));\n\n    Promise.all([api.fetchPosts(), api.fetchUsers(), api.fetchComments()])\n      .then(([postsFromServer, usersFromServer, commentsFromServer]) => {\n        const preparedPosts = postsFromServer.map(post => {\n          return {\n            ...post,\n            user: usersFromServer.find(user => user.id === post.userId) || [],\n            comments: commentsFromServer.filter(comment => post.id === comment.postId) || [],\n          };\n        });\n\n        dispatch(setPosts(preparedPosts as Post[]));\n      })\n      .catch(e => {\n        dispatch(setError(e.message));\n      })\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as store from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(store.getIsLoading);\n  const errorMessage = useSelector(store.getErrorMessage);\n\n  const buttonText = (errorMessage ? 'Try again' : 'Load');\n\n  return (\n    <button\n      type=\"button\"\n      className=\"app__load-button\"\n      onClick={() => dispatch(store.loadPosts())}\n      disabled={isLoading}\n    >\n      {isLoading ? 'Loading...' : buttonText}\n    </button>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FC<Props> = ({ comment }) => {\n  const {\n    name,\n    email,\n    body,\n  } = comment;\n\n  return (\n    <li className=\"app__comment\">\n      <p className=\"app__comment-text\">\n        {body}\n      </p>\n      <span className=\"app__comment-name\">\n        {name}\n\n      </span>\n      <a\n        className=\"app__comment-email\"\n        href={`mailto:${email}`}\n      >\n        {email}\n      </a>\n\n    </li>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\n\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentsList: React.FC<Props> = ({ comments }) => {\n  return (\n    <div className=\"app__comments\">\n      <span className=\"app__comments-title\">\n        Comments:\n      </span>\n      <ul className=\"app__comments-list\">\n        {comments.map(comment => (\n          <Comment key={comment.id} comment={comment} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CommentsList;\n","import React from 'react';\n\ntype Props = {\n  user: User;\n};\n\nconst User: React.FC<Props> = ({ user }) => {\n  const { name, phone } = user;\n\n  return (\n    <div className=\"app__user\">\n      <span className=\"app__user-title\">\n        Author info:\n      </span>\n      <span className=\"app__user-name\">\n        {name}\n      </span>\n      <a\n        className=\"app__user-phone\"\n        href={`tel:${phone}`}\n      >\n        {phone}\n      </a>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport CommentsList from './CommentsList';\nimport UserInfo from './UserInfo';\nimport { deletePost } from '../store/posts';\n\ntype Props = {\n  post: Post;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  const {\n    id,\n    title,\n    body,\n    comments,\n    user,\n  } = post;\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"app__post\">\n      <button\n        type=\"button\"\n        className=\"app__delete-button\"\n        onClick={() => dispatch(deletePost(id))}\n      >\n        Delete post\n      </button>\n      <h2 className=\"app__post-title\">\n        {title}\n      </h2>\n      <p className=\"app__post-text\">\n        {body}\n      </p>\n      <UserInfo user={user} />\n      {comments && (\n        <CommentsList comments={comments} />\n      )}\n    </li>\n  );\n};\n\nexport default Post;\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Post from './Post';\nimport { setQuery } from '../store/search';\nimport { getSearchQuery } from '../store';\nimport { debounce } from '../helpers/debounce';\n\ntype Props = {\n  posts: Post[];\n};\n\nconst PostsList: React.FC<Props> = ({ posts }) => {\n  const dispatch = useDispatch();\n  const searchQuery = useSelector(getSearchQuery);\n\n  const filteredPosts = useMemo(() => {\n    return posts.filter(post => post.title.toLowerCase().includes(searchQuery)\n      || post.body.toLowerCase().includes(searchQuery));\n  }, [posts, searchQuery]);\n\n  const handleSearchInput = debounce((value: string) => {\n    dispatch(setQuery(value));\n  }, 500);\n\n  return (\n    <div className=\"app__posts\">\n      <input\n        className=\"app__posts-input\"\n        type=\"text\"\n        onChange={(e) => handleSearchInput(e.target.value)}\n      />\n      {`posts: ${filteredPosts.length}`}\n      <ul className=\"app__posts-list\">\n        {filteredPosts.map(post => (\n          <Post\n            key={post.id}\n            post={post}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostsList;\n","export function debounce(func: (...args: string[]) => void, delay: number) {\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  return (...args: string[]): void => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\n\nimport * as store from './store';\nimport PostsList from './components/PostsList';\n\nconst App = () => {\n  const posts = useSelector(store.getPosts);\n  const errorMessage = useSelector(store.getErrorMessage);\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        Redux list of posts\n      </h1>\n      {posts.length === 0 ? (\n        <Start />\n      ) : (\n        <PostsList posts={posts} />\n      )}\n      {errorMessage !== '' && (\n        <div className=\"app__error\">\n          <span className=\"app__error-title\">\n            An error has occured:\n          </span>\n          <span className=\"app__error-text\">\n            {errorMessage}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}